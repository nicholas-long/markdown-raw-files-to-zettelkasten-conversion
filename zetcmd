#!/bin/bash
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

# parse args with case statement
VERBOSE=0
PAGING="no"
while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--paging)
      PAGING=1
      ;;
    -f|--file|--forwarding-address)
      shift
      filearg="$1"
      ;;
    -q|--query)
      shift # pop arg
      query="$1"
      ;;
    -t|--title)
      shift # pop arg
      title="$1"
      ;;
    -v|--verbose)
      VERBOSE=1
      ;;
    -h|--help)
      echo "Usage: $0 action [ options ]"
      echo "| action: [ new, rm, search, print, refs, preview ]"
      echo "Options:"
      cat "$0" | grep '^\s\+-.|--.*' | sed 's/)$//'
      exit 1
      ;;
    *)
      if [ -z "$action" ]; then
        action="$1"
      elif [ $action == "print" ]; then
        bat --paging=never zet/$1/README.md
      else
        arg="$1"
      fi
      ;;
  esac
  shift
done

echo "$action $title $arg $filearg" > /dev/stderr
case $action in
  n|new)
    echo "making new"
    id=$(date -u +%Y%m%d%H%M%S)
    mkdir -p zet/$id
    filepath="zet/$id/README.md"
    cp zettel-template "$filepath"
    if [ ! -z "$title" ]; then
      sed -i "s|{{title}}|$title|" "$filepath"
    fi
    nvim "$filepath"
    echo "Created Zettel ID $id"
    ;;
  enum)
    #TODO: join tags with related tags in enum
    find zet -name README.md | xargs awk '
      BEGIN { OFS="\t" }
      FNR == 1 {
        gsub(/^# +/,"")
        head = $0
      }
      { last = $0 }
      BEGINFILE {
        if (last) print lastfilename, head, last
        lastfilename = FILENAME
      }
    '
    ;;
  refs)
    awk '
      BEGIN {
        for (n = 1; n < ARGC; n++) {
          if (ARGV[n] ~ /^[0-9]+$/) {
            ARGV[n] = "zet/" ARGV[n] "/README.md"
          }
        }
      }
      BEGINFILE { refs = 0 }
      #refs && /^ *$/ { nextfile }
      refs && /^- [0-9]+ *$/ { print $2 } # print un-enriched IDs in list
      refs && /^- \[[0-9]+\]/ {
        gsub(/^- +/,"")
        gsub(/^\[/,"")
        gsub(/\].*/,"")
        print
      }
      /^# [Rr]elated/ { refs = 1 }
    ' $arg
    ;;
  search)
    #TODO: full content searching
    $0 enum | grep "$query" | fzf -m --preview="$0 preview -f {} 2>/dev/null"
    ;;
  preview)
    if [ ! -z "$filearg" ]; then
      filearg=$(echo $filearg | awk '{print $1}')
      bat --color=always "$filearg"
    fi
    ;;
  rm)
    del_id="$arg"
    forward_id="$filearg"
    echo "$del_id -> $forward_id" > /dev/stderr
    if [ -z "$forward_id" ]; then
      echo "forwarding id is required to delete, pass with -f"
      exit 1
    fi
    find zet -name README.md | xargs sed -i "/$del_id/s/^.*$/- $forward_id/"
    ;;
esac
